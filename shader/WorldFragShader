#version 120
	   		 
varying vec4 passColor;
varying vec2 passTextureCoord;
varying vec3 passNormal;
uniform sampler2D tex;
varying vec3 position;
uniform vec3 viewPos;

	   		 

	   		 
	 
	   		 
 void main() {
 	vec3 normalCoord = passNormal;
 	vec4 color = texture2D(tex, passTextureCoord);
 	vec4 light = passColor;
 	vec3 lightPos = vec3(0,150,0);
	vec3 norm = normalize(normalCoord);
	vec3 lightDir = normalize(lightPos - position);  
	float diff = max(dot(norm, lightDir), 0.0);
	vec3 viewDir = normalize(viewPos - position);
	vec3 reflectDir = reflect(-lightDir, norm);  
	vec3 halfwayDir = normalize(lightDir + viewDir);
	float spec = pow(max(dot(viewDir, halfwayDir), 0.0), 32*0.01);
	float sm = 1;
	vec3 normal = normalCoord;
	vec3 brightness = (diff+spec*0.5)* vec3(light.r,light.g,light.b);
	if(brightness.r < 0.1){
	brightness.r = 0.1;
	brightness.b = 0.1;
	brightness.g = 0.1;
	}
 	vec3 outputColor = vec3(color.r,color.g,color.b)*brightness;
	gl_FragColor = vec4(outputColor.r,outputColor.g,outputColor.b,color.a);
 }